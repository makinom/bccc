/* global describe,it */
'use strict'
let ACH = require('../lib/ach')

describe('ACH (AES+CBC+HMAC)', function () {
  describe('@encrypt', function () {
    it('should encrypt data', function () {
      let data = new Buffer([0])
      let cipherkey = new Buffer(256 / 8)
      cipherkey.fill(0x12)
      let encbuf = ACH.encrypt(data, cipherkey)
      encbuf.length.should.equal(256 / 8 + 256 / 8)
    })

    it('should encrypt this data and get a known value generated with sjcl', function () {
      let data = new Buffer('this is my test data')
      let cipherkey = new Buffer(256 / 8)
      cipherkey.fill(0x70)
      let ivbuf = new Buffer(128 / 8)
      ivbuf.fill(0x07)
      let encbuf = ACH.encrypt(data, cipherkey, ivbuf)
      let enchex = '5ca7fb171ef5001fdc26aca9ca806279200a8dd9bc3580b95d80335ed358627e07070707070707070707070707070707a1e5dd6b76089f0c055d718c9f597d22d727422cb1a28dd1a30aacb0cb008c1d'
      encbuf.toString('hex').should.equal(enchex)
    })
  })

  describe('@decrypt', function () {
    it('should throw an error of data is incorrect length', function () {
      let encbuf = new Buffer('7519aff134f4fd273b41e50e6b9fac4d39b42afe6c2335551a4c06c4bdf9198d667b0dd26e935fdd5454e99ab27d8c17404199c79cb0c9d3884d2bd5bbd2b6', 'hex')
      let cipherkey = new Buffer(256 / 8)
      cipherkey.fill(0x12)
      ;(function () {
        ACH.decrypt(encbuf, cipherkey)
      }).should.throw('The encrypted data must be at least 256+128+128 bits, which is the length of the HMAC plus the iv plus the smallest encrypted data size')
    })

    it('should throw an error of data for incorrect hmac', function () {
      let encbuf = new Buffer('0019aff134f4fd273b41e50e6b9fac4d39b42afe6c2335551a4c06c4bdf9198d667b0dd26e935fdd5454e99ab27d8c17404199c79cb0c9d3884d2bd5bbd2b619', 'hex')
      let cipherkey = new Buffer(256 / 8)
      cipherkey.fill(0x12)
      ;(function () {
        ACH.decrypt(encbuf, cipherkey)
      }).should.throw('Message authentication failed - HMACs are not equivalent')
    })

    it('should decrypt data', function () {
      let encbuf = new Buffer('7519aff134f4fd273b41e50e6b9fac4d39b42afe6c2335551a4c06c4bdf9198d667b0dd26e935fdd5454e99ab27d8c17404199c79cb0c9d3884d2bd5bbd2b619', 'hex')
      let cipherkey = new Buffer(256 / 8)
      cipherkey.fill(0x12)
      let data = ACH.decrypt(encbuf, cipherkey)
      data.toString('hex').should.equal('00')
    })

    it('should decrypt this encrypted data generated by sjcl', function () {
      let ptbuf = new Buffer('this is my test data')
      let pthex = ptbuf.toString('hex')
      let encbuf = new Buffer('5ca7fb171ef5001fdc26aca9ca806279200a8dd9bc3580b95d80335ed358627e07070707070707070707070707070707a1e5dd6b76089f0c055d718c9f597d22d727422cb1a28dd1a30aacb0cb008c1d', 'hex')
      let cipherkey = new Buffer(256 / 8)
      cipherkey.fill(0x70)
      let data = ACH.decrypt(encbuf, cipherkey)
      data.toString('hex').should.equal(pthex)
    })
  })
})
